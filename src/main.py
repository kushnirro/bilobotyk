import telebot
from telebot import types
import requests
import datetime
import json
import os
import logging
import threading
import time
from dotenv import load_dotenv
from config import (
    SETTLEMENTS, WEATHER_CACHE_TIMEOUT, WEATHER_API_TIMEOUT, 
    WEATHER_EMOJIS, FORECAST_CACHE_TIMEOUT, DEFAULT_NOTIFICATION_TIMES,
    MAX_NOTIFICATIONS_PER_USER, NEWS_SOURCES
)
from holidays import get_all_holidays
from database import Database
from news import NewsLinks

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
log_dir = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'logs')
os.makedirs(log_dir, exist_ok=True)

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(os.path.join(log_dir, 'bot.log')),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è
env_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), '.env')
if not os.path.exists(env_path):
    raise FileNotFoundError(f"–§–∞–π–ª .env –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ —à–ª—è—Ö–æ–º: {env_path}")
load_dotenv(env_path)

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª—é—á—ñ–≤ API –∑ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
WEATHER_API_KEY = os.getenv('WEATHER_API_KEY')

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è")
if not WEATHER_API_KEY:
    raise ValueError("WEATHER_API_KEY –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è")

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞, –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —Ç–∞ –ø–∞—Ä—Å–µ—Ä–∞ –Ω–æ–≤–∏–Ω
bot = telebot.TeleBot(BOT_TOKEN)
db = Database()
news_parser = NewsLinks()

# –ö–µ—à—ñ –¥–ª—è –¥–∞–Ω–∏—Ö
weather_cache = {}
forecast_cache = {}

# –°–ø–∏—Å–æ–∫ —Å–≤—è—Ç
holidays = get_all_holidays()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≥–æ–¥–∏
def get_weather(lat, lon):
    cache_key = f"{lat}_{lon}"
    current_time = time.time()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–µ—à—É
    if cache_key in weather_cache:
        cached_data = weather_cache[cache_key]
        if current_time - cached_data['timestamp'] < WEATHER_CACHE_TIMEOUT:
            return cached_data['data']
    
    try:
        url = f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={WEATHER_API_KEY}&units=metric&lang=uk"
        response = requests.get(url, timeout=WEATHER_API_TIMEOUT)
        response.raise_for_status()
        data = response.json()
        
        weather_description = data["weather"][0]["description"]
        temp = data["main"]["temp"]
        feels_like = data["main"]["feels_like"]
        humidity = data["main"]["humidity"]
        wind_speed = data["wind"]["speed"]
        
        weather_emoji = get_weather_emoji(data["weather"][0]["main"])
        
        weather_info = (
            f"{weather_emoji} *–ü–æ–≥–æ–¥–∞:* {weather_description}\n"
            f"üå°Ô∏è *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* {temp:.1f}¬∞C\n"
            f"üå°Ô∏è *–í—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫:* {feels_like:.1f}¬∞C\n"
            f"üíß *–í–æ–ª–æ–≥—ñ—Å—Ç—å:* {humidity}%\n"
            f"üí® *–®–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ—Ç—Ä—É:* {wind_speed} –º/—Å"
        )
        
        # –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –≤ –∫–µ—à—ñ
        weather_cache[cache_key] = {
            'data': weather_info,
            'timestamp': current_time
        }
        
        return weather_info
    except requests.RequestException as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ API –ø–æ–≥–æ–¥–∏: {e}")
        return "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
    except KeyError as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö –ø–æ–≥–æ–¥–∏: {e}")
        return "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö –ø–æ–≥–æ–¥–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
    except Exception as e:
        logger.error(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        return "‚ùå –°—Ç–∞–ª–∞—Å—è –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ –µ–º–æ–¥–∑—ñ –¥–æ –ø–æ–≥–æ–¥–∏
def get_weather_emoji(weather_main):
    return WEATHER_EMOJIS.get(weather_main, "üåà")

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–≤—è—Ç –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –¥–Ω—è
def get_today_holidays():
    today = datetime.datetime.now()
    holidays = get_all_holidays(today.year)
    today_key = today.strftime("%m-%d")
    
    if today_key in holidays:
        return f"üìÖ *–°—å–æ–≥–æ–¥–Ω—ñ:* {holidays[today_key]}"
    return "üìÖ *–°—å–æ–≥–æ–¥–Ω—ñ –Ω–µ–º–∞—î –¥–µ—Ä–∂–∞–≤–Ω–∏—Ö –∞–±–æ —Ä–µ–ª—ñ–≥—ñ–π–Ω–∏—Ö —Å–≤—è—Ç.*"

def get_weather_forecast(lat, lon):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –Ω–∞ 5 –¥–Ω—ñ–≤"""
    cache_key = f"{lat}_{lon}"
    current_time = time.time()
    
    if cache_key in forecast_cache:
        cached_data = forecast_cache[cache_key]
        if current_time - cached_data['timestamp'] < FORECAST_CACHE_TIMEOUT:
            return cached_data['data']
    
    try:
        url = f"https://api.openweathermap.org/data/2.5/forecast?lat={lat}&lon={lon}&appid={WEATHER_API_KEY}&units=metric&lang=uk"
        response = requests.get(url, timeout=WEATHER_API_TIMEOUT)
        response.raise_for_status()
        data = response.json()
        
        forecast_info = []
        current_date = None
        
        for item in data['list']:
            date = datetime.datetime.fromtimestamp(item['dt'])
            if current_date != date.date():
                current_date = date.date()
                
                weather = item['weather'][0]
                temp = item['main']['temp']
                weather_emoji = get_weather_emoji(weather['main'])
                
                forecast_info.append(
                    f"\nüìÖ *{date.strftime('%d.%m.%Y')}*:\n"
                    f"{weather_emoji} {weather['description'].capitalize()}\n"
                    f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp:.1f}¬∞C"
                )
        
        result = "üîÆ *–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –Ω–∞ 5 –¥–Ω—ñ–≤:*\n" + "\n".join(forecast_info)
        
        forecast_cache[cache_key] = {
            'data': result,
            'timestamp': current_time
        }
        
        return result
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É –ø–æ–≥–æ–¥–∏: {e}")
        return "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."

def show_notification_settings(message):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å"""
    markup = types.InlineKeyboardMarkup(row_width=1)
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    current_times = db.get_user_notifications(message.chat.id)
    
    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö —á–∞—Å—ñ–≤
    for time in DEFAULT_NOTIFICATION_TIMES:
        text = f"{'‚úÖ' if time in current_times else '‚ùå'} {time}"
        markup.add(types.InlineKeyboardButton(
            text, callback_data=f"toggle_notification_{time}"
        ))
    
    markup.add(types.InlineKeyboardButton(
        "üîÑ –ó–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="save_notifications"
    ))
    
    bot.send_message(
        message.chat.id,
        "‚öôÔ∏è *–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å –ø—Ä–æ –ø–æ–≥–æ–¥—É*\n\n"
        "–û–±–µ—Ä—ñ—Ç—å —á–∞—Å, –∫–æ–ª–∏ –≤–∏ —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–≥–æ–¥—É:\n"
        "‚úÖ - —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω–æ\n"
        "‚ùå - —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ",
        reply_markup=markup,
        parse_mode="Markdown"
    )

def show_news_sources(message):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–∂–µ—Ä–µ–ª–∞ –Ω–æ–≤–∏–Ω"""
    news = news_parser.get_news_sources()
    bot.send_message(
        message.chat.id,
        news,
        parse_mode="Markdown",
        disable_web_page_preview=True
    )

# –û–Ω–æ–≤–ª—é—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    weather_button = types.KeyboardButton('üå§Ô∏è –ü–æ–≥–æ–¥–∞')
    forecast_button = types.KeyboardButton('üîÆ –ü—Ä–æ–≥–Ω–æ–∑')
    news_button = types.KeyboardButton('üì∞ –ù–æ–≤–∏–Ω–∏')
    holiday_button = types.KeyboardButton('üìÖ –°–≤—è—Ç–∞ —Å—å–æ–≥–æ–¥–Ω—ñ')
    settings_button = types.KeyboardButton('‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è')
    markup.add(weather_button, forecast_button, news_button, holiday_button, settings_button)
    
    welcome_message = (
        "–í—ñ—Ç–∞—é! –Ø –±–æ—Ç –ë—ñ–ª–æ–±–æ–∂–Ω–∏—Ü—å–∫–æ—ó –≥—Ä–æ–º–∞–¥–∏. üëã\n\n"
        "–Ø –º–æ–∂—É –ø–æ–∫–∞–∑–∞—Ç–∏ –≤–∞–º:\n"
        "- –ü–æ—Ç–æ—á–Ω—É –ø–æ–≥–æ–¥—É üå§Ô∏è\n"
        "- –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –Ω–∞ 5 –¥–Ω—ñ–≤ üîÆ\n"
        "- –û—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏ üì∞\n"
        "- –°–≤—è—Ç–∞ —Ç–∞ –≤–∏–∑–Ω–∞—á–Ω—ñ –¥–∞—Ç–∏ üìÖ\n"
        "- –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–≥–æ–¥—É ‚öôÔ∏è"
    )
    
    bot.send_message(message.chat.id, welcome_message, reply_markup=markup)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /weather
@bot.message_handler(commands=['weather'])
def weather_command(message):
    show_settlement_selection(message, "weather")

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /forecast
@bot.message_handler(commands=['forecast'])
def forecast_command(message):
    show_settlement_selection(message, "forecast")

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /news
@bot.message_handler(commands=['news'])
def news_command(message):
    show_news_sources(message)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /holiday
@bot.message_handler(commands=['holiday'])
def holiday_command(message):
    holiday_info = get_today_holidays()
    bot.send_message(message.chat.id, holiday_info, parse_mode="Markdown")

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /settings
@bot.message_handler(commands=['settings'])
def settings_command(message):
    show_notification_settings(message)

# –ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é –≤–∏–±–æ—Ä—É –Ω–∞—Å–µ–ª–µ–Ω–∏—Ö –ø—É–Ω–∫—Ç—ñ–≤
def show_settlement_selection(message, action_type="weather"):
    markup = types.InlineKeyboardMarkup(row_width=2)
    buttons = []
    
    for settlement in SETTLEMENTS:
        callback_data = f"{action_type}_{settlement}"
        buttons.append(types.InlineKeyboardButton(settlement, callback_data=callback_data))
    
    markup.add(*buttons)
    
    title = "–û–±–µ—Ä—ñ—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è"
    if action_type == "weather":
        title += " –ø–æ–≥–æ–¥–∏"
    else:
        title += " –ø—Ä–æ–≥–Ω–æ–∑—É –ø–æ–≥–æ–¥–∏"
    
    bot.send_message(message.chat.id, title, reply_markup=markup)

# –û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    if call.data.startswith("weather_"):
        settlement = call.data.split("_")[1]
        if settlement in SETTLEMENTS:
            lat = SETTLEMENTS[settlement]["lat"]
            lon = SETTLEMENTS[settlement]["lon"]
            weather_info = get_weather(lat, lon)
            message_text = f"*–ü–æ–≥–æ–¥–∞ —É {settlement}*\n\n{weather_info}"
            bot.send_message(call.message.chat.id, message_text, parse_mode="Markdown")
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—Ä–∞–Ω–∏–π –Ω–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç
            db.save_user_settlement(call.message.chat.id, settlement)
    
    elif call.data.startswith("forecast_"):
        settlement = call.data.split("_")[1]
        if settlement in SETTLEMENTS:
            lat = SETTLEMENTS[settlement]["lat"]
            lon = SETTLEMENTS[settlement]["lon"]
            forecast_info = get_weather_forecast(lat, lon)
            message_text = f"*–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –¥–ª—è {settlement}*\n\n{forecast_info}"
            bot.send_message(call.message.chat.id, message_text, parse_mode="Markdown")
    
    elif call.data.startswith("news_"):
        source = call.data.split("_")[1]
        news = news_parser.get_source_link(source)
        bot.send_message(call.message.chat.id, news, parse_mode="Markdown", disable_web_page_preview=False)
    
    elif call.data.startswith("toggle_notification_"):
        time = call.data.split("_")[2]
        current_times = db.get_user_notifications(call.message.chat.id)
        
        if time in current_times:
            current_times.remove(time)
        elif len(current_times) < MAX_NOTIFICATIONS_PER_USER:
            current_times.append(time)
        
        db.save_user_notifications(call.message.chat.id, current_times)
        show_notification_settings(call.message)
    
    elif call.data == "save_notifications":
        bot.send_message(
            call.message.chat.id,
            "‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å –∑–±–µ—Ä–µ–∂–µ–Ω–æ!"
        )
    
    bot.answer_callback_query(call.id)

# –û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@bot.message_handler(content_types=['text'])
def handle_text(message):
    if message.text == 'üå§Ô∏è –ü–æ–≥–æ–¥–∞':
        show_settlement_selection(message, "weather")
    elif message.text == 'üîÆ –ü—Ä–æ–≥–Ω–æ–∑':
        show_settlement_selection(message, "forecast")
    elif message.text == 'üì∞ –ù–æ–≤–∏–Ω–∏':
        show_news_sources(message)
    elif message.text == 'üìÖ –°–≤—è—Ç–∞ —Å—å–æ–≥–æ–¥–Ω—ñ':
        holiday_info = get_today_holidays()
        bot.send_message(message.chat.id, holiday_info, parse_mode="Markdown")
    elif message.text == '‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è':
        show_notification_settings(message)
    else:
        bot.send_message(
            message.chat.id,
            "–û–±–µ—Ä—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂—á–µ –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥–∏:\n"
            "/weather - –ü–æ–≥–æ–¥–∞\n"
            "/forecast - –ü—Ä–æ–≥–Ω–æ–∑\n"
            "/news - –ù–æ–≤–∏–Ω–∏\n"
            "/holiday - –°–≤—è—Ç–∞\n"
            "/settings - –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"
        )

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å
def send_weather_notifications():
    while True:
        current_time = datetime.datetime.now().strftime("%H:%M")
        users = db.get_users_for_notification(current_time)
        
        for user in users:
            if user["settlement"] in SETTLEMENTS:
                lat = SETTLEMENTS[user["settlement"]]["lat"]
                lon = SETTLEMENTS[user["settlement"]]["lon"]
                weather_info = get_weather(lat, lon)
                message_text = f"üîî *–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–≥–æ–¥—É —É {user['settlement']}*\n\n{weather_info}"
                
                try:
                    bot.send_message(user["user_id"], message_text, parse_mode="Markdown")
                    db.update_last_notification(user["user_id"])
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user['user_id']}: {e}")
        
        # –ß–µ–∫–∞—î–º–æ 1 —Ö–≤–∏–ª–∏–Ω—É –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é
        time.sleep(60)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ—Ç—ñ–∫ –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å
    notification_thread = threading.Thread(target=send_weather_notifications, daemon=True)
    notification_thread.start()
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    bot.polling(none_stop=True)