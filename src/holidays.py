from datetime import datetime, timedelta
import calendar

def calculate_easter(year):
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–∞—Ç–∏ –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω–æ–≥–æ –í–µ–ª–∏–∫–æ–¥–Ω—è –∑–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º –ú–µ–ª–µ—Ä–∞."""
    a = year % 19
    b = year % 4
    c = year % 7
    d = (19 * a + 15) % 30
    e = (2 * b + 4 * c + 6 * d + 6) % 7
    f = d + e
    
    if f <= 9:
        day = f + 22
        month = 3
    else:
        day = f - 9
        month = 4
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –∑ —é–ª—ñ–∞–Ω—Å—å–∫–æ–≥–æ –≤ –≥—Ä–∏–≥–æ—Ä—ñ–∞–Ω—Å—å–∫–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä
    julian_date = datetime(year, month, day)
    gregorian_date = julian_date + timedelta(days=13)
    
    return gregorian_date.strftime("%m-%d")

def calculate_vyshyvanka_day(year):
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–Ω—è –≤–∏—à–∏–≤–∞–Ω–∫–∏ (—Ç—Ä–µ—Ç—ñ–π —á–µ—Ç–≤–µ—Ä —Ç—Ä–∞–≤–Ω—è)."""
    c = calendar.monthcalendar(year, 5)
    thursdays = [week[calendar.THURSDAY] for week in c if week[calendar.THURSDAY] != 0]
    third_thursday = thursdays[2]
    return f"05-{third_thursday:02d}"

def calculate_trinity_day(year):
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–Ω—è –¢—Ä—ñ–π—Ü—ñ (50 –¥–Ω—ñ–≤ –ø—ñ—Å–ª—è –í–µ–ª–∏–∫–æ–¥–Ω—è)."""
    easter_date = datetime.strptime(f"{year}-{calculate_easter(year)}", "%Y-%m-%d")
    trinity_date = easter_date + timedelta(days=49)
    return trinity_date.strftime("%m-%d")

def get_dynamic_holidays(year):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–≤—è—Ç –∑ –¥–∏–Ω–∞–º—ñ—á–Ω–∏–º–∏ –¥–∞—Ç–∞–º–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–æ–∫—É."""
    return {
        calculate_easter(year): "üê£ –í–µ–ª–∏–∫–¥–µ–Ω—å",
        calculate_vyshyvanka_day(year): "üå∫ –î–µ–Ω—å –≤–∏—à–∏–≤–∞–Ω–∫–∏",
        calculate_trinity_day(year): "üåø –¢—Ä—ñ–π—Ü—è"
    }

# –°—Ç–∞—Ç–∏—á–Ω—ñ —Å–≤—è—Ç–∞ —Ç–∞ –≤–∏–∑–Ω–∞—á–Ω—ñ –¥–∞—Ç–∏
STATIC_HOLIDAYS = {
    # –°—ñ—á–µ–Ω—å
    "01-01": "üéÑ –ù–æ–≤–∏–π —Ä—ñ–∫",
    "01-06": "üåü –°–≤—è—Ç–≤–µ—á—ñ—Ä",
    "01-07": "üéÑ –†—ñ–∑–¥–≤–æ –•—Ä–∏—Å—Ç–æ–≤–µ (–∑–∞ —é–ª—ñ–∞–Ω—Å—å–∫–∏–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º)",
    "01-14": "üéâ –°—Ç–∞—Ä–∏–π –ù–æ–≤–∏–π —Ä—ñ–∫",
    "01-22": "üá∫üá¶ –î–µ–Ω—å –°–æ–±–æ—Ä–Ω–æ—Å—Ç—ñ –£–∫—Ä–∞—ó–Ω–∏",
    "01-27": "üïØÔ∏è –ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏–π –¥–µ–Ω—å –ø–∞–º'—è—Ç—ñ –∂–µ—Ä—Ç–≤ –ì–æ–ª–æ–∫–æ—Å—Ç—É",
    
    # –õ—é—Ç–∏–π
    "02-15": "üïØÔ∏è –î–µ–Ω—å –≤—à–∞–Ω—É–≤–∞–Ω–Ω—è —É—á–∞—Å–Ω–∏–∫—ñ–≤ –±–æ–π–æ–≤–∏—Ö –¥—ñ–π –Ω–∞ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó —ñ–Ω—à–∏—Ö –¥–µ—Ä–∂–∞–≤",
    "02-20": "üïØÔ∏è –î–µ–Ω—å –ì–µ—Ä–æ—ó–≤ –ù–µ–±–µ—Å–Ω–æ—ó –°–æ—Ç–Ω—ñ",
    
    # –ë–µ—Ä–µ–∑–µ–Ω—å
    "03-08": "üå∑ –ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏–π –∂—ñ–Ω–æ—á–∏–π –¥–µ–Ω—å",
    "03-09": "üìö –î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –¢–∞—Ä–∞—Å–∞ –®–µ–≤—á–µ–Ω–∫–∞",
    "03-14": "üá∫üá¶ –î–µ–Ω—å —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –¥–æ–±—Ä–æ–≤–æ–ª—å—Ü—è",
    
    # –ö–≤—ñ—Ç–µ–Ω—å
    "04-26": "üïØÔ∏è –î–µ–Ω—å —á–æ—Ä–Ω–æ–±–∏–ª—å—Å—å–∫–æ—ó —Ç—Ä–∞–≥–µ–¥—ñ—ó",
    
    # –¢—Ä–∞–≤–µ–Ω—å
    "05-01": "üå± –î–µ–Ω—å –ø—Ä–∞—Ü—ñ",
    "05-08": "üïØÔ∏è –î–µ–Ω—å –ø–∞–º'—è—Ç—ñ —Ç–∞ –ø—Ä–∏–º–∏—Ä–µ–Ω–Ω—è",
    "05-09": "üéñÔ∏è –î–µ–Ω—å –ø–µ—Ä–µ–º–æ–≥–∏ –Ω–∞–¥ –Ω–∞—Ü–∏–∑–º–æ–º —É –î—Ä—É–≥—ñ–π —Å–≤—ñ—Ç–æ–≤—ñ–π –≤—ñ–π–Ω—ñ",
    "05-15": "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏–π –¥–µ–Ω—å —Å—ñ–º'—ó",
    
    # –ß–µ—Ä–≤–µ–Ω—å
    "06-01": "üë∂ –ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏–π –¥–µ–Ω—å –∑–∞—Ö–∏—Å—Ç—É –¥—ñ—Ç–µ–π",
    "06-28": "üá∫üá¶ –î–µ–Ω—å –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü—ñ—ó –£–∫—Ä–∞—ó–Ω–∏",
    
    # –õ–∏–ø–µ–Ω—å
    "07-28": "üá∫üá¶ –î–µ–Ω—å –£–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –î–µ—Ä–∂–∞–≤–Ω–æ—Å—Ç—ñ",
    
    # –°–µ—Ä–ø–µ–Ω—å
    "08-24": "üá∫üá¶ –î–µ–Ω—å –ù–µ–∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –£–∫—Ä–∞—ó–Ω–∏",
    
    # –í–µ—Ä–µ—Å–µ–Ω—å
    "09-01": "üéì –î–µ–Ω—å –∑–Ω–∞–Ω—å",
    "09-30": "üìö –î–µ–Ω—å –±—ñ–±–ª—ñ–æ—Ç–µ–∫",
    
    # –ñ–æ–≤—Ç–µ–Ω—å
    "10-01": "üéµ –ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏–π –¥–µ–Ω—å –º—É–∑–∏–∫–∏",
    "10-14": "üéñÔ∏è –î–µ–Ω—å –∑–∞—Ö–∏—Å–Ω–∏–∫—ñ–≤ —ñ –∑–∞—Ö–∏—Å–Ω–∏—Ü—å –£–∫—Ä–∞—ó–Ω–∏",
    
    # –õ–∏—Å—Ç–æ–ø–∞–¥
    "11-09": "üìö –î–µ–Ω—å —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –ø–∏—Å–µ–º–Ω–æ—Å—Ç—ñ —Ç–∞ –º–æ–≤–∏",
    "11-21": "üá∫üá¶ –î–µ–Ω—å –ì—ñ–¥–Ω–æ—Å—Ç—ñ —Ç–∞ –°–≤–æ–±–æ–¥–∏",
    "11-26": "üïØÔ∏è –î–µ–Ω—å –ø–∞–º'—è—Ç—ñ –∂–µ—Ä—Ç–≤ –≥–æ–ª–æ–¥–æ–º–æ—Ä—ñ–≤",
    
    # –ì—Ä—É–¥–µ–Ω—å
    "12-06": "üéñÔ∏è –î–µ–Ω—å –ó–±—Ä–æ–π–Ω–∏—Ö –°–∏–ª –£–∫—Ä–∞—ó–Ω–∏",
    "12-19": "üéÖ –î–µ–Ω—å –°–≤—è—Ç–æ–≥–æ –ú–∏–∫–æ–ª–∞—è",
    "12-25": "üéÑ –†—ñ–∑–¥–≤–æ –•—Ä–∏—Å—Ç–æ–≤–µ (–∑–∞ –≥—Ä–∏–≥–æ—Ä—ñ–∞–Ω—Å—å–∫–∏–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º)"
}

def get_all_holidays(year=None):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö —Å–≤—è—Ç –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –¥–∏–Ω–∞–º—ñ—á–Ω–∏—Ö –¥–∞—Ç."""
    if year is None:
        year = datetime.now().year
        
    all_holidays = STATIC_HOLIDAYS.copy()
    all_holidays.update(get_dynamic_holidays(year))
    return all_holidays 